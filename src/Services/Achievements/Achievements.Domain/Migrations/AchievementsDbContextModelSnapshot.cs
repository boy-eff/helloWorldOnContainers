// <auto-generated />
using System;
using Achievements.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Achievements.Domain.Migrations
{
    [DbContext(typeof(AchievementsDbContext))]
    partial class AchievementsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Achievements.Domain.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Achievements.Domain.Models.AchievementLevel", b =>
                {
                    b.Property<int>("AchievementId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("PointsToAchieve")
                        .HasColumnType("integer");

                    b.Property<int>("Reward")
                        .HasColumnType("integer");

                    b.HasKey("AchievementId", "Level");

                    b.ToTable("AchievementLevels");
                });

            modelBuilder.Entity("Achievements.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("CollectionsCreatedAmount")
                        .HasColumnType("integer");

                    b.Property<int>("CollectionsPassedAmount")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("integer");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("WordsInDictionaryAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Achievements.Domain.Models.UsersAchievements", b =>
                {
                    b.Property<int>("AchievementId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("AchieveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("integer");

                    b.HasKey("AchievementId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersAchievements");
                });

            modelBuilder.Entity("Achievements.Domain.Models.AchievementLevel", b =>
                {
                    b.HasOne("Achievements.Domain.Models.Achievement", "Achievement")
                        .WithMany("Levels")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("Achievements.Domain.Models.UsersAchievements", b =>
                {
                    b.HasOne("Achievements.Domain.Models.Achievement", "Achievement")
                        .WithMany("UsersAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Achievements.Domain.Models.User", "User")
                        .WithMany("UsersAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Achievements.Domain.Models.Achievement", b =>
                {
                    b.Navigation("Levels");

                    b.Navigation("UsersAchievements");
                });

            modelBuilder.Entity("Achievements.Domain.Models.User", b =>
                {
                    b.Navigation("UsersAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
